
		//if (i == 7) {
		//	Date finalDob(delimitedRows[100][5]);

		//	//LAST LOG ON DATE
		//	Date finalLastLogDate(delimitedRows[100][10]);

		//	//LAST LOG ON TIME
		//	string finalLastLogTime = delimitedRows[100][11];
		//	unsigned short int lastHours = stoi(finalLastLogTime.substr(0, finalLastLogTime.find(timeDelimiter)));
		//	finalLastLogTime = finalLastLogTime.substr(3);
		//	unsigned short int lastMinutes = stoi(finalLastLogTime.substr(0, finalLastLogTime.find(timeDelimiter)));

		//	TimeHHMM lastLogOnTime(lastHours, lastMinutes);

		//	//JOINED ON
		//	Date lastJoinedOn(delimitedRows[100][12]);

		//	Student newerStudent(delimitedRows[100][0], stoi(delimitedRows[100][1]), delimitedRows[100][2], delimitedRows[100][3], delimitedRows[100][4], finalDob,
		//		delimitedRows[100][6], delimitedRows[100][7], delimitedRows[100][8], delimitedRows[100][9], finalLastLogDate, lastLogOnTime, lastJoinedOn, delimitedRows[100][13]);

		//	StudentKey newerKey(newerStudent.getUser_id(), newerStudent.getFirst_name(), newerStudent.getEmail());
		//	bool truth = newNode.insert(newerKey, newerStudent);
		//	cout << truth;

		//	cout << "\n" << newNode.getData().getEmail() << endl;
		//	TNode<StudentKey, Student> *newestNode = newNode.getpRight();
		//	cout << "\n" << newestNode->getData().getEmail() << endl;

		//	break;
		//}

		/*for (auto it = delimitedRows[i].begin(); it != delimitedRows[i].end(); it++)

			cout << *it << " " << endl;
		cout << endl;*/
